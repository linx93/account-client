// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: company/company.proto

package company

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CompanyService_GetCompanies_FullMethodName           = "/company.CompanyService/GetCompanies"
	CompanyService_GetAccounts_FullMethodName            = "/company.CompanyService/GetAccounts"
	CompanyService_GetSuperAccount_FullMethodName        = "/company.CompanyService/GetSuperAccount"
	CompanyService_GetSuperAccounts_FullMethodName       = "/company.CompanyService/GetSuperAccounts"
	CompanyService_GetCompanyByTenant_FullMethodName     = "/company.CompanyService/GetCompanyByTenant"
	CompanyService_GetCompaniesByProvince_FullMethodName = "/company.CompanyService/GetCompaniesByProvince"
)

// CompanyServiceClient is the client API for CompanyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CompanyServiceClient interface {
	GetCompanies(ctx context.Context, in *GetCompaniesRequest, opts ...grpc.CallOption) (*GetCompaniesResponse, error)
	GetAccounts(ctx context.Context, in *GetAccountsRequest, opts ...grpc.CallOption) (*GetAccountsResponse, error)
	GetSuperAccount(ctx context.Context, in *GetSuperAccountRequest, opts ...grpc.CallOption) (*GetSuperAccountResponse, error)
	GetSuperAccounts(ctx context.Context, in *GetSuperAccountsRequest, opts ...grpc.CallOption) (*GetSuperAccountsResponse, error)
	GetCompanyByTenant(ctx context.Context, in *GetCompanyByTenantRequest, opts ...grpc.CallOption) (*GetCompanyResponse, error)
	GetCompaniesByProvince(ctx context.Context, in *GetCompaniesByProvinceRequest, opts ...grpc.CallOption) (*GetCompaniesResponse, error)
}

type companyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCompanyServiceClient(cc grpc.ClientConnInterface) CompanyServiceClient {
	return &companyServiceClient{cc}
}

func (c *companyServiceClient) GetCompanies(ctx context.Context, in *GetCompaniesRequest, opts ...grpc.CallOption) (*GetCompaniesResponse, error) {
	out := new(GetCompaniesResponse)
	err := c.cc.Invoke(ctx, CompanyService_GetCompanies_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetAccounts(ctx context.Context, in *GetAccountsRequest, opts ...grpc.CallOption) (*GetAccountsResponse, error) {
	out := new(GetAccountsResponse)
	err := c.cc.Invoke(ctx, CompanyService_GetAccounts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetSuperAccount(ctx context.Context, in *GetSuperAccountRequest, opts ...grpc.CallOption) (*GetSuperAccountResponse, error) {
	out := new(GetSuperAccountResponse)
	err := c.cc.Invoke(ctx, CompanyService_GetSuperAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetSuperAccounts(ctx context.Context, in *GetSuperAccountsRequest, opts ...grpc.CallOption) (*GetSuperAccountsResponse, error) {
	out := new(GetSuperAccountsResponse)
	err := c.cc.Invoke(ctx, CompanyService_GetSuperAccounts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetCompanyByTenant(ctx context.Context, in *GetCompanyByTenantRequest, opts ...grpc.CallOption) (*GetCompanyResponse, error) {
	out := new(GetCompanyResponse)
	err := c.cc.Invoke(ctx, CompanyService_GetCompanyByTenant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetCompaniesByProvince(ctx context.Context, in *GetCompaniesByProvinceRequest, opts ...grpc.CallOption) (*GetCompaniesResponse, error) {
	out := new(GetCompaniesResponse)
	err := c.cc.Invoke(ctx, CompanyService_GetCompaniesByProvince_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CompanyServiceServer is the server API for CompanyService service.
// All implementations must embed UnimplementedCompanyServiceServer
// for forward compatibility
type CompanyServiceServer interface {
	GetCompanies(context.Context, *GetCompaniesRequest) (*GetCompaniesResponse, error)
	GetAccounts(context.Context, *GetAccountsRequest) (*GetAccountsResponse, error)
	GetSuperAccount(context.Context, *GetSuperAccountRequest) (*GetSuperAccountResponse, error)
	GetSuperAccounts(context.Context, *GetSuperAccountsRequest) (*GetSuperAccountsResponse, error)
	GetCompanyByTenant(context.Context, *GetCompanyByTenantRequest) (*GetCompanyResponse, error)
	GetCompaniesByProvince(context.Context, *GetCompaniesByProvinceRequest) (*GetCompaniesResponse, error)
	mustEmbedUnimplementedCompanyServiceServer()
}

// UnimplementedCompanyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCompanyServiceServer struct {
}

func (UnimplementedCompanyServiceServer) GetCompanies(context.Context, *GetCompaniesRequest) (*GetCompaniesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompanies not implemented")
}
func (UnimplementedCompanyServiceServer) GetAccounts(context.Context, *GetAccountsRequest) (*GetAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccounts not implemented")
}
func (UnimplementedCompanyServiceServer) GetSuperAccount(context.Context, *GetSuperAccountRequest) (*GetSuperAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSuperAccount not implemented")
}
func (UnimplementedCompanyServiceServer) GetSuperAccounts(context.Context, *GetSuperAccountsRequest) (*GetSuperAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSuperAccounts not implemented")
}
func (UnimplementedCompanyServiceServer) GetCompanyByTenant(context.Context, *GetCompanyByTenantRequest) (*GetCompanyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompanyByTenant not implemented")
}
func (UnimplementedCompanyServiceServer) GetCompaniesByProvince(context.Context, *GetCompaniesByProvinceRequest) (*GetCompaniesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompaniesByProvince not implemented")
}
func (UnimplementedCompanyServiceServer) mustEmbedUnimplementedCompanyServiceServer() {}

// UnsafeCompanyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CompanyServiceServer will
// result in compilation errors.
type UnsafeCompanyServiceServer interface {
	mustEmbedUnimplementedCompanyServiceServer()
}

func RegisterCompanyServiceServer(s grpc.ServiceRegistrar, srv CompanyServiceServer) {
	s.RegisterService(&CompanyService_ServiceDesc, srv)
}

func _CompanyService_GetCompanies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompaniesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetCompanies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyService_GetCompanies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetCompanies(ctx, req.(*GetCompaniesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyService_GetAccounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetAccounts(ctx, req.(*GetAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetSuperAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSuperAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetSuperAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyService_GetSuperAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetSuperAccount(ctx, req.(*GetSuperAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetSuperAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSuperAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetSuperAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyService_GetSuperAccounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetSuperAccounts(ctx, req.(*GetSuperAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetCompanyByTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompanyByTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetCompanyByTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyService_GetCompanyByTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetCompanyByTenant(ctx, req.(*GetCompanyByTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetCompaniesByProvince_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompaniesByProvinceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetCompaniesByProvince(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyService_GetCompaniesByProvince_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetCompaniesByProvince(ctx, req.(*GetCompaniesByProvinceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CompanyService_ServiceDesc is the grpc.ServiceDesc for CompanyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CompanyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "company.CompanyService",
	HandlerType: (*CompanyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCompanies",
			Handler:    _CompanyService_GetCompanies_Handler,
		},
		{
			MethodName: "GetAccounts",
			Handler:    _CompanyService_GetAccounts_Handler,
		},
		{
			MethodName: "GetSuperAccount",
			Handler:    _CompanyService_GetSuperAccount_Handler,
		},
		{
			MethodName: "GetSuperAccounts",
			Handler:    _CompanyService_GetSuperAccounts_Handler,
		},
		{
			MethodName: "GetCompanyByTenant",
			Handler:    _CompanyService_GetCompanyByTenant_Handler,
		},
		{
			MethodName: "GetCompaniesByProvince",
			Handler:    _CompanyService_GetCompaniesByProvince_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "company/company.proto",
}
