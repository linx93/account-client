// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0-devel
// 	protoc        v3.21.12
// source: approval.proto

package approval

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Step
// 审批步骤
type Step struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Step     uint32 `protobuf:"varint,1,opt,name=step,proto3" json:"step"`        // 审批序列，从0开始
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name"`         // 审批人姓名
	Username string `protobuf:"bytes,3,opt,name=username,proto3" json:"username"` // 审批人用户名
}

func (x *Step) Reset() {
	*x = Step{}
	if protoimpl.UnsafeEnabled {
		mi := &file_approval_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Step) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Step) ProtoMessage() {}

func (x *Step) ProtoReflect() protoreflect.Message {
	mi := &file_approval_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Step.ProtoReflect.Descriptor instead.
func (*Step) Descriptor() ([]byte, []int) {
	return file_approval_proto_rawDescGZIP(), []int{0}
}

func (x *Step) GetStep() uint32 {
	if x != nil {
		return x.Step
	}
	return 0
}

func (x *Step) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Step) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

// CC
// 抄送人
type CC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name"`         // 抄送人姓名
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username"` // 抄送人用户名
}

func (x *CC) Reset() {
	*x = CC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_approval_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CC) ProtoMessage() {}

func (x *CC) ProtoReflect() protoreflect.Message {
	mi := &file_approval_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CC.ProtoReflect.Descriptor instead.
func (*CC) Descriptor() ([]byte, []int) {
	return file_approval_proto_rawDescGZIP(), []int{1}
}

func (x *CC) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CC) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

// Config
// 配置审批
type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	Tenant    int64   `protobuf:"varint,2,opt,name=tenant,proto3" json:"tenant"`
	AppId     string  `protobuf:"bytes,3,opt,name=appId,proto3" json:"appId"`
	Business  string  `protobuf:"bytes,4,opt,name=business,proto3" json:"business"`
	Enable    bool    `protobuf:"varint,5,opt,name=enable,proto3" json:"enable"`
	Steps     []*Step `protobuf:"bytes,6,rep,name=steps,proto3" json:"steps"`
	CC        []*CC   `protobuf:"bytes,7,rep,name=CC,proto3" json:"CC"`
	CreatedAt int64   `protobuf:"varint,8,opt,name=createdAt,proto3" json:"createdAt"`
	UpdatedAt int64   `protobuf:"varint,9,opt,name=updatedAt,proto3" json:"updatedAt"`
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_approval_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_approval_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_approval_proto_rawDescGZIP(), []int{2}
}

func (x *Config) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Config) GetTenant() int64 {
	if x != nil {
		return x.Tenant
	}
	return 0
}

func (x *Config) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *Config) GetBusiness() string {
	if x != nil {
		return x.Business
	}
	return ""
}

func (x *Config) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *Config) GetSteps() []*Step {
	if x != nil {
		return x.Steps
	}
	return nil
}

func (x *Config) GetCC() []*CC {
	if x != nil {
		return x.CC
	}
	return nil
}

func (x *Config) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Config) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

// Approval
// 审批实例
type Approval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	Tenant            int64  `protobuf:"varint,2,opt,name=tenant,proto3" json:"tenant"`
	AppId             string `protobuf:"bytes,3,opt,name=appId,proto3" json:"appId"`
	Business          string `protobuf:"bytes,4,opt,name=business,proto3" json:"business"`
	ApplicantUsername string `protobuf:"bytes,5,opt,name=applicantUsername,proto3" json:"applicantUsername"`
	ApplicantName     string `protobuf:"bytes,6,opt,name=applicantName,proto3" json:"applicantName"`
	Status            uint32 `protobuf:"varint,7,opt,name=status,proto3" json:"status"`
	CreatedAt         int64  `protobuf:"varint,8,opt,name=createdAt,proto3" json:"createdAt"`
	UpdatedAt         int64  `protobuf:"varint,9,opt,name=updatedAt,proto3" json:"updatedAt"`
}

func (x *Approval) Reset() {
	*x = Approval{}
	if protoimpl.UnsafeEnabled {
		mi := &file_approval_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Approval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Approval) ProtoMessage() {}

func (x *Approval) ProtoReflect() protoreflect.Message {
	mi := &file_approval_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Approval.ProtoReflect.Descriptor instead.
func (*Approval) Descriptor() ([]byte, []int) {
	return file_approval_proto_rawDescGZIP(), []int{3}
}

func (x *Approval) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Approval) GetTenant() int64 {
	if x != nil {
		return x.Tenant
	}
	return 0
}

func (x *Approval) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *Approval) GetBusiness() string {
	if x != nil {
		return x.Business
	}
	return ""
}

func (x *Approval) GetApplicantUsername() string {
	if x != nil {
		return x.ApplicantUsername
	}
	return ""
}

func (x *Approval) GetApplicantName() string {
	if x != nil {
		return x.ApplicantName
	}
	return ""
}

func (x *Approval) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Approval) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Approval) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

// Sequence
// 审批序列
type Sequence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	Approval  int64  `protobuf:"varint,2,opt,name=approval,proto3" json:"approval"`
	Step      uint32 `protobuf:"varint,3,opt,name=step,proto3" json:"step"`
	Name      string `protobuf:"bytes,4,opt,name=name,proto3" json:"name"`
	Username  string `protobuf:"bytes,5,opt,name=username,proto3" json:"username"`
	Status    uint32 `protobuf:"varint,6,opt,name=status,proto3" json:"status"`
	Success   bool   `protobuf:"varint,7,opt,name=success,proto3" json:"success"`
	Remark    string `protobuf:"bytes,8,opt,name=remark,proto3" json:"remark"`
	CreatedAt int64  `protobuf:"varint,9,opt,name=createdAt,proto3" json:"createdAt"`
	UpdatedAt int64  `protobuf:"varint,10,opt,name=updatedAt,proto3" json:"updatedAt"`
}

func (x *Sequence) Reset() {
	*x = Sequence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_approval_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sequence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sequence) ProtoMessage() {}

func (x *Sequence) ProtoReflect() protoreflect.Message {
	mi := &file_approval_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sequence.ProtoReflect.Descriptor instead.
func (*Sequence) Descriptor() ([]byte, []int) {
	return file_approval_proto_rawDescGZIP(), []int{4}
}

func (x *Sequence) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Sequence) GetApproval() int64 {
	if x != nil {
		return x.Approval
	}
	return 0
}

func (x *Sequence) GetStep() uint32 {
	if x != nil {
		return x.Step
	}
	return 0
}

func (x *Sequence) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Sequence) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Sequence) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Sequence) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *Sequence) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *Sequence) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Sequence) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type ApprovalPage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page      int64       `protobuf:"varint,1,opt,name=page,proto3" json:"page"`
	Size      int64       `protobuf:"varint,2,opt,name=size,proto3" json:"size"`
	Total     int64       `protobuf:"varint,3,opt,name=total,proto3" json:"total"`
	Approvals []*Approval `protobuf:"bytes,4,rep,name=approvals,proto3" json:"approvals"`
}

func (x *ApprovalPage) Reset() {
	*x = ApprovalPage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_approval_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApprovalPage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApprovalPage) ProtoMessage() {}

func (x *ApprovalPage) ProtoReflect() protoreflect.Message {
	mi := &file_approval_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApprovalPage.ProtoReflect.Descriptor instead.
func (*ApprovalPage) Descriptor() ([]byte, []int) {
	return file_approval_proto_rawDescGZIP(), []int{5}
}

func (x *ApprovalPage) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ApprovalPage) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ApprovalPage) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ApprovalPage) GetApprovals() []*Approval {
	if x != nil {
		return x.Approvals
	}
	return nil
}

// CreateConfigRequest
// 创建审批配置的参数
type CreateConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tenant   int64   `protobuf:"varint,1,opt,name=tenant,proto3" json:"tenant"`
	Business string  `protobuf:"bytes,2,opt,name=business,proto3" json:"business"`
	Steps    []*Step `protobuf:"bytes,3,rep,name=steps,proto3" json:"steps"`
	CC       []*CC   `protobuf:"bytes,4,rep,name=CC,proto3" json:"CC"`
}

func (x *CreateConfigRequest) Reset() {
	*x = CreateConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_approval_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateConfigRequest) ProtoMessage() {}

func (x *CreateConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_approval_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateConfigRequest.ProtoReflect.Descriptor instead.
func (*CreateConfigRequest) Descriptor() ([]byte, []int) {
	return file_approval_proto_rawDescGZIP(), []int{6}
}

func (x *CreateConfigRequest) GetTenant() int64 {
	if x != nil {
		return x.Tenant
	}
	return 0
}

func (x *CreateConfigRequest) GetBusiness() string {
	if x != nil {
		return x.Business
	}
	return ""
}

func (x *CreateConfigRequest) GetSteps() []*Step {
	if x != nil {
		return x.Steps
	}
	return nil
}

func (x *CreateConfigRequest) GetCC() []*CC {
	if x != nil {
		return x.CC
	}
	return nil
}

// CreateConfigResponse
// 创建审批配置的响应
type CreateConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok      bool    `protobuf:"varint,1,opt,name=ok,proto3" json:"ok"`
	Code    int64   `protobuf:"varint,2,opt,name=code,proto3" json:"code"`
	Message string  `protobuf:"bytes,3,opt,name=message,proto3" json:"message"`
	Config  *Config `protobuf:"bytes,4,opt,name=config,proto3" json:"config"`
}

func (x *CreateConfigResponse) Reset() {
	*x = CreateConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_approval_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateConfigResponse) ProtoMessage() {}

func (x *CreateConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_approval_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateConfigResponse.ProtoReflect.Descriptor instead.
func (*CreateConfigResponse) Descriptor() ([]byte, []int) {
	return file_approval_proto_rawDescGZIP(), []int{7}
}

func (x *CreateConfigResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *CreateConfigResponse) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreateConfigResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CreateConfigResponse) GetConfig() *Config {
	if x != nil {
		return x.Config
	}
	return nil
}

// GetConfigRequest
// 获取审批配置的参数
type GetConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tenant   int64  `protobuf:"varint,1,opt,name=tenant,proto3" json:"tenant"`
	Business string `protobuf:"bytes,2,opt,name=business,proto3" json:"business"`
}

func (x *GetConfigRequest) Reset() {
	*x = GetConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_approval_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigRequest) ProtoMessage() {}

func (x *GetConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_approval_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigRequest.ProtoReflect.Descriptor instead.
func (*GetConfigRequest) Descriptor() ([]byte, []int) {
	return file_approval_proto_rawDescGZIP(), []int{8}
}

func (x *GetConfigRequest) GetTenant() int64 {
	if x != nil {
		return x.Tenant
	}
	return 0
}

func (x *GetConfigRequest) GetBusiness() string {
	if x != nil {
		return x.Business
	}
	return ""
}

// GetConfigResponse
// 获取审批配置的响应
type GetConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok      bool    `protobuf:"varint,1,opt,name=ok,proto3" json:"ok"`
	Code    int64   `protobuf:"varint,2,opt,name=code,proto3" json:"code"`
	Message string  `protobuf:"bytes,3,opt,name=message,proto3" json:"message"`
	Config  *Config `protobuf:"bytes,4,opt,name=config,proto3" json:"config"`
}

func (x *GetConfigResponse) Reset() {
	*x = GetConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_approval_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigResponse) ProtoMessage() {}

func (x *GetConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_approval_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigResponse.ProtoReflect.Descriptor instead.
func (*GetConfigResponse) Descriptor() ([]byte, []int) {
	return file_approval_proto_rawDescGZIP(), []int{9}
}

func (x *GetConfigResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *GetConfigResponse) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetConfigResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetConfigResponse) GetConfig() *Config {
	if x != nil {
		return x.Config
	}
	return nil
}

// GetConfigRequest
// 获取应用租户所有审批配置的参数
type GetConfigsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tenant int64 `protobuf:"varint,1,opt,name=tenant,proto3" json:"tenant"`
}

func (x *GetConfigsRequest) Reset() {
	*x = GetConfigsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_approval_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConfigsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigsRequest) ProtoMessage() {}

func (x *GetConfigsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_approval_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigsRequest.ProtoReflect.Descriptor instead.
func (*GetConfigsRequest) Descriptor() ([]byte, []int) {
	return file_approval_proto_rawDescGZIP(), []int{10}
}

func (x *GetConfigsRequest) GetTenant() int64 {
	if x != nil {
		return x.Tenant
	}
	return 0
}

// GetConfigsResponse
// 获取审批配置的响应
type GetConfigsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok      bool      `protobuf:"varint,1,opt,name=ok,proto3" json:"ok"`
	Code    int64     `protobuf:"varint,2,opt,name=code,proto3" json:"code"`
	Message string    `protobuf:"bytes,3,opt,name=message,proto3" json:"message"`
	Configs []*Config `protobuf:"bytes,4,rep,name=configs,proto3" json:"configs"`
}

func (x *GetConfigsResponse) Reset() {
	*x = GetConfigsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_approval_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConfigsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigsResponse) ProtoMessage() {}

func (x *GetConfigsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_approval_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigsResponse.ProtoReflect.Descriptor instead.
func (*GetConfigsResponse) Descriptor() ([]byte, []int) {
	return file_approval_proto_rawDescGZIP(), []int{11}
}

func (x *GetConfigsResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *GetConfigsResponse) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetConfigsResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetConfigsResponse) GetConfigs() []*Config {
	if x != nil {
		return x.Configs
	}
	return nil
}

// CreateApprovalRequest
// 创建一个审批实例的参数
type CreateApprovalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tenant            int64  `protobuf:"varint,1,opt,name=tenant,proto3" json:"tenant"`
	Business          string `protobuf:"bytes,2,opt,name=business,proto3" json:"business"`
	ApplicantUsername string `protobuf:"bytes,3,opt,name=applicantUsername,proto3" json:"applicantUsername"`
}

func (x *CreateApprovalRequest) Reset() {
	*x = CreateApprovalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_approval_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateApprovalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateApprovalRequest) ProtoMessage() {}

func (x *CreateApprovalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_approval_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateApprovalRequest.ProtoReflect.Descriptor instead.
func (*CreateApprovalRequest) Descriptor() ([]byte, []int) {
	return file_approval_proto_rawDescGZIP(), []int{12}
}

func (x *CreateApprovalRequest) GetTenant() int64 {
	if x != nil {
		return x.Tenant
	}
	return 0
}

func (x *CreateApprovalRequest) GetBusiness() string {
	if x != nil {
		return x.Business
	}
	return ""
}

func (x *CreateApprovalRequest) GetApplicantUsername() string {
	if x != nil {
		return x.ApplicantUsername
	}
	return ""
}

// CreateApprovalResponse
// 创建一个审批实例的响应
type CreateApprovalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok        bool        `protobuf:"varint,1,opt,name=ok,proto3" json:"ok"`
	Code      int64       `protobuf:"varint,2,opt,name=code,proto3" json:"code"`
	Message   string      `protobuf:"bytes,3,opt,name=message,proto3" json:"message"`
	Approval  *Approval   `protobuf:"bytes,4,opt,name=approval,proto3" json:"approval"`
	Sequences []*Sequence `protobuf:"bytes,5,rep,name=sequences,proto3" json:"sequences"`
}

func (x *CreateApprovalResponse) Reset() {
	*x = CreateApprovalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_approval_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateApprovalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateApprovalResponse) ProtoMessage() {}

func (x *CreateApprovalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_approval_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateApprovalResponse.ProtoReflect.Descriptor instead.
func (*CreateApprovalResponse) Descriptor() ([]byte, []int) {
	return file_approval_proto_rawDescGZIP(), []int{13}
}

func (x *CreateApprovalResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *CreateApprovalResponse) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CreateApprovalResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CreateApprovalResponse) GetApproval() *Approval {
	if x != nil {
		return x.Approval
	}
	return nil
}

func (x *CreateApprovalResponse) GetSequences() []*Sequence {
	if x != nil {
		return x.Sequences
	}
	return nil
}

// ApproveRequest
// 同意一次审批的参数
type ApproveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tenant   int64  `protobuf:"varint,1,opt,name=tenant,proto3" json:"tenant"`
	Approval int64  `protobuf:"varint,2,opt,name=approval,proto3" json:"approval"`
	Username string `protobuf:"bytes,3,opt,name=username,proto3" json:"username"`
}

func (x *ApproveRequest) Reset() {
	*x = ApproveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_approval_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApproveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveRequest) ProtoMessage() {}

func (x *ApproveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_approval_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveRequest.ProtoReflect.Descriptor instead.
func (*ApproveRequest) Descriptor() ([]byte, []int) {
	return file_approval_proto_rawDescGZIP(), []int{14}
}

func (x *ApproveRequest) GetTenant() int64 {
	if x != nil {
		return x.Tenant
	}
	return 0
}

func (x *ApproveRequest) GetApproval() int64 {
	if x != nil {
		return x.Approval
	}
	return 0
}

func (x *ApproveRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

// ApproveResponse
// 同意一次审批的响应
type ApproveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok        bool        `protobuf:"varint,1,opt,name=ok,proto3" json:"ok"`
	Code      int64       `protobuf:"varint,2,opt,name=code,proto3" json:"code"`
	Message   string      `protobuf:"bytes,3,opt,name=message,proto3" json:"message"`
	Approval  *Approval   `protobuf:"bytes,4,opt,name=approval,proto3" json:"approval"`
	Sequences []*Sequence `protobuf:"bytes,5,rep,name=sequences,proto3" json:"sequences"`
}

func (x *ApproveResponse) Reset() {
	*x = ApproveResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_approval_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApproveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveResponse) ProtoMessage() {}

func (x *ApproveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_approval_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveResponse.ProtoReflect.Descriptor instead.
func (*ApproveResponse) Descriptor() ([]byte, []int) {
	return file_approval_proto_rawDescGZIP(), []int{15}
}

func (x *ApproveResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *ApproveResponse) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ApproveResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ApproveResponse) GetApproval() *Approval {
	if x != nil {
		return x.Approval
	}
	return nil
}

func (x *ApproveResponse) GetSequences() []*Sequence {
	if x != nil {
		return x.Sequences
	}
	return nil
}

// DenyRequest
// 拒绝一次审批的参数
type DenyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tenant   int64  `protobuf:"varint,1,opt,name=tenant,proto3" json:"tenant"`
	Approval int64  `protobuf:"varint,2,opt,name=approval,proto3" json:"approval"`
	Username string `protobuf:"bytes,3,opt,name=username,proto3" json:"username"`
	Remark   string `protobuf:"bytes,4,opt,name=remark,proto3" json:"remark"`
}

func (x *DenyRequest) Reset() {
	*x = DenyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_approval_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DenyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DenyRequest) ProtoMessage() {}

func (x *DenyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_approval_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DenyRequest.ProtoReflect.Descriptor instead.
func (*DenyRequest) Descriptor() ([]byte, []int) {
	return file_approval_proto_rawDescGZIP(), []int{16}
}

func (x *DenyRequest) GetTenant() int64 {
	if x != nil {
		return x.Tenant
	}
	return 0
}

func (x *DenyRequest) GetApproval() int64 {
	if x != nil {
		return x.Approval
	}
	return 0
}

func (x *DenyRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *DenyRequest) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

// DenyResponse
// 拒绝一次审批的响应
type DenyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok        bool        `protobuf:"varint,1,opt,name=ok,proto3" json:"ok"`
	Code      int64       `protobuf:"varint,2,opt,name=code,proto3" json:"code"`
	Message   string      `protobuf:"bytes,3,opt,name=message,proto3" json:"message"`
	Approval  *Approval   `protobuf:"bytes,4,opt,name=approval,proto3" json:"approval"`
	Sequences []*Sequence `protobuf:"bytes,5,rep,name=sequences,proto3" json:"sequences"`
}

func (x *DenyResponse) Reset() {
	*x = DenyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_approval_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DenyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DenyResponse) ProtoMessage() {}

func (x *DenyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_approval_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DenyResponse.ProtoReflect.Descriptor instead.
func (*DenyResponse) Descriptor() ([]byte, []int) {
	return file_approval_proto_rawDescGZIP(), []int{17}
}

func (x *DenyResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *DenyResponse) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *DenyResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DenyResponse) GetApproval() *Approval {
	if x != nil {
		return x.Approval
	}
	return nil
}

func (x *DenyResponse) GetSequences() []*Sequence {
	if x != nil {
		return x.Sequences
	}
	return nil
}

// GetMyApprovalRequest
// 获取我的待审批参数
type GetMyApprovalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tenant   int64  `protobuf:"varint,1,opt,name=tenant,proto3" json:"tenant"`
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username"`
}

func (x *GetMyApprovalRequest) Reset() {
	*x = GetMyApprovalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_approval_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMyApprovalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMyApprovalRequest) ProtoMessage() {}

func (x *GetMyApprovalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_approval_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMyApprovalRequest.ProtoReflect.Descriptor instead.
func (*GetMyApprovalRequest) Descriptor() ([]byte, []int) {
	return file_approval_proto_rawDescGZIP(), []int{18}
}

func (x *GetMyApprovalRequest) GetTenant() int64 {
	if x != nil {
		return x.Tenant
	}
	return 0
}

func (x *GetMyApprovalRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

// GetMyApprovalResponse
// 获取的待审批响应
type GetMyApprovalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok        bool        `protobuf:"varint,1,opt,name=ok,proto3" json:"ok"`
	Code      int64       `protobuf:"varint,2,opt,name=code,proto3" json:"code"`
	Message   string      `protobuf:"bytes,3,opt,name=message,proto3" json:"message"`
	Approvals []*Approval `protobuf:"bytes,4,rep,name=approvals,proto3" json:"approvals"`
}

func (x *GetMyApprovalResponse) Reset() {
	*x = GetMyApprovalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_approval_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMyApprovalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMyApprovalResponse) ProtoMessage() {}

func (x *GetMyApprovalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_approval_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMyApprovalResponse.ProtoReflect.Descriptor instead.
func (*GetMyApprovalResponse) Descriptor() ([]byte, []int) {
	return file_approval_proto_rawDescGZIP(), []int{19}
}

func (x *GetMyApprovalResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *GetMyApprovalResponse) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetMyApprovalResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetMyApprovalResponse) GetApprovals() []*Approval {
	if x != nil {
		return x.Approvals
	}
	return nil
}

// PageMyApprovalRequest
// 分页获取我的审批记录参数
type PageMyApprovalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tenant   int64  `protobuf:"varint,1,opt,name=tenant,proto3" json:"tenant"`
	Username string `protobuf:"bytes,2,opt,name=username,proto3" json:"username"`
	Page     int64  `protobuf:"varint,3,opt,name=page,proto3" json:"page"`
	Size     int64  `protobuf:"varint,4,opt,name=size,proto3" json:"size"`
}

func (x *PageMyApprovalRequest) Reset() {
	*x = PageMyApprovalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_approval_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageMyApprovalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageMyApprovalRequest) ProtoMessage() {}

func (x *PageMyApprovalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_approval_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageMyApprovalRequest.ProtoReflect.Descriptor instead.
func (*PageMyApprovalRequest) Descriptor() ([]byte, []int) {
	return file_approval_proto_rawDescGZIP(), []int{20}
}

func (x *PageMyApprovalRequest) GetTenant() int64 {
	if x != nil {
		return x.Tenant
	}
	return 0
}

func (x *PageMyApprovalRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *PageMyApprovalRequest) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *PageMyApprovalRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

// PageMyApprovalResponse
// 分页获取我的审批记录响应
type PageMyApprovalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok      bool          `protobuf:"varint,1,opt,name=ok,proto3" json:"ok"`
	Code    int64         `protobuf:"varint,2,opt,name=code,proto3" json:"code"`
	Message string        `protobuf:"bytes,3,opt,name=message,proto3" json:"message"`
	Page    *ApprovalPage `protobuf:"bytes,4,opt,name=page,proto3" json:"page"`
}

func (x *PageMyApprovalResponse) Reset() {
	*x = PageMyApprovalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_approval_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageMyApprovalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageMyApprovalResponse) ProtoMessage() {}

func (x *PageMyApprovalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_approval_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageMyApprovalResponse.ProtoReflect.Descriptor instead.
func (*PageMyApprovalResponse) Descriptor() ([]byte, []int) {
	return file_approval_proto_rawDescGZIP(), []int{21}
}

func (x *PageMyApprovalResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *PageMyApprovalResponse) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *PageMyApprovalResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PageMyApprovalResponse) GetPage() *ApprovalPage {
	if x != nil {
		return x.Page
	}
	return nil
}

// GetSequencesRequest
// 获取审核实例的审核序列参数
type GetSequencesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tenant   int64 `protobuf:"varint,1,opt,name=tenant,proto3" json:"tenant"`
	Approval int64 `protobuf:"varint,2,opt,name=approval,proto3" json:"approval"`
}

func (x *GetSequencesRequest) Reset() {
	*x = GetSequencesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_approval_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSequencesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSequencesRequest) ProtoMessage() {}

func (x *GetSequencesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_approval_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSequencesRequest.ProtoReflect.Descriptor instead.
func (*GetSequencesRequest) Descriptor() ([]byte, []int) {
	return file_approval_proto_rawDescGZIP(), []int{22}
}

func (x *GetSequencesRequest) GetTenant() int64 {
	if x != nil {
		return x.Tenant
	}
	return 0
}

func (x *GetSequencesRequest) GetApproval() int64 {
	if x != nil {
		return x.Approval
	}
	return 0
}

// GetSequencesResponse
// 获取审核实例的审核序列响应
type GetSequencesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok        bool        `protobuf:"varint,1,opt,name=ok,proto3" json:"ok"`
	Code      int64       `protobuf:"varint,2,opt,name=code,proto3" json:"code"`
	Message   string      `protobuf:"bytes,3,opt,name=message,proto3" json:"message"`
	Sequences []*Sequence `protobuf:"bytes,4,rep,name=sequences,proto3" json:"sequences"`
}

func (x *GetSequencesResponse) Reset() {
	*x = GetSequencesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_approval_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSequencesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSequencesResponse) ProtoMessage() {}

func (x *GetSequencesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_approval_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSequencesResponse.ProtoReflect.Descriptor instead.
func (*GetSequencesResponse) Descriptor() ([]byte, []int) {
	return file_approval_proto_rawDescGZIP(), []int{23}
}

func (x *GetSequencesResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *GetSequencesResponse) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetSequencesResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetSequencesResponse) GetSequences() []*Sequence {
	if x != nil {
		return x.Sequences
	}
	return nil
}

var File_approval_proto protoreflect.FileDescriptor

var file_approval_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x22, 0x4a, 0x0a, 0x04, 0x53, 0x74,
	0x65, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x34, 0x0a, 0x02, 0x43, 0x43, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xfa, 0x01, 0x0a,
	0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x05, 0x73, 0x74, 0x65,
	0x70, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x61, 0x6c, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x52, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x12,
	0x1c, 0x0a, 0x02, 0x43, 0x43, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x2e, 0x43, 0x43, 0x52, 0x02, 0x43, 0x43, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x8c, 0x02, 0x0a, 0x08, 0x41, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61,
	0x70, 0x70, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x12, 0x2c, 0x0a, 0x11, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x6e, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x80, 0x02, 0x0a, 0x08, 0x53, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x73, 0x74, 0x65, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x7e, 0x0a, 0x0c, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x30, 0x0a, 0x09, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c,
	0x52, 0x09, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x73, 0x22, 0x8d, 0x01, 0x0a, 0x13,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x24, 0x0a, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x52, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x12, 0x1c, 0x0a,
	0x02, 0x43, 0x43, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x61, 0x6c, 0x2e, 0x43, 0x43, 0x52, 0x02, 0x43, 0x43, 0x22, 0x7e, 0x0a, 0x14, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x02, 0x6f, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x28, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x46, 0x0a, 0x10, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x22, 0x7b, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x22, 0x2b, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x22, 0x7e, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x02, 0x6f, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x2a, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x22, 0x79, 0x0a,
	0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x6e, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xb8, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x02, 0x6f, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x2e, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x2e, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x12, 0x30, 0x0a, 0x09, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x2e,
	0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x22, 0x60, 0x0a, 0x0e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xb1, 0x01, 0x0a, 0x0f, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x61, 0x6c, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x12, 0x30, 0x0a, 0x09, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x61, 0x6c, 0x2e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x22, 0x75, 0x0a, 0x0b, 0x44, 0x65, 0x6e,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x22, 0xae, 0x01, 0x0a, 0x0c, 0x44, 0x65, 0x6e, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f,
	0x6b, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x2e, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x2e, 0x41, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x12,
	0x30, 0x0a, 0x09, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x2e, 0x53, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x22, 0x4a, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4d, 0x79, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x87, 0x01,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x4d, 0x79, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x61, 0x6c, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x09, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x73, 0x22, 0x73, 0x0a, 0x15, 0x50, 0x61, 0x67, 0x65, 0x4d,
	0x79, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x82, 0x01, 0x0a,
	0x16, 0x50, 0x61, 0x67, 0x65, 0x4d, 0x79, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x2e, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x22, 0x49, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x22, 0x86, 0x01, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x02, 0x6f, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x2e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x32, 0xe1, 0x05, 0x0a, 0x0f, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x55, 0x0a, 0x14, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x1d, 0x2e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1e, 0x2e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4c, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1a, 0x2e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1b, 0x2e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x12, 0x1b, 0x2e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1c, 0x2e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x53, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x12, 0x1f, 0x2e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x20, 0x2e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0f, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x12, 0x18, 0x2e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x61, 0x6c, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x19, 0x2e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x2e, 0x41, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0c,
	0x44, 0x65, 0x6e, 0x79, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x12, 0x15, 0x2e, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x2e, 0x44, 0x65, 0x6e, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x2e, 0x44,
	0x65, 0x6e, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0d, 0x47,
	0x65, 0x74, 0x4d, 0x79, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x12, 0x1e, 0x2e, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x79, 0x41, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x79, 0x41, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a,
	0x0e, 0x50, 0x61, 0x67, 0x65, 0x4d, 0x79, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x12,
	0x1f, 0x2e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x4d,
	0x79, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x20, 0x2e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x2e, 0x50, 0x61, 0x67, 0x65,
	0x4d, 0x79, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x55, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x1d, 0x2e, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x61, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x61, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x2b, 0x5a, 0x29, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x63, 0x78, 0x63, 0x6e, 0x2f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x62, 0x2f, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_approval_proto_rawDescOnce sync.Once
	file_approval_proto_rawDescData = file_approval_proto_rawDesc
)

func file_approval_proto_rawDescGZIP() []byte {
	file_approval_proto_rawDescOnce.Do(func() {
		file_approval_proto_rawDescData = protoimpl.X.CompressGZIP(file_approval_proto_rawDescData)
	})
	return file_approval_proto_rawDescData
}

var file_approval_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_approval_proto_goTypes = []interface{}{
	(*Step)(nil),                   // 0: approval.Step
	(*CC)(nil),                     // 1: approval.CC
	(*Config)(nil),                 // 2: approval.Config
	(*Approval)(nil),               // 3: approval.Approval
	(*Sequence)(nil),               // 4: approval.Sequence
	(*ApprovalPage)(nil),           // 5: approval.ApprovalPage
	(*CreateConfigRequest)(nil),    // 6: approval.CreateConfigRequest
	(*CreateConfigResponse)(nil),   // 7: approval.CreateConfigResponse
	(*GetConfigRequest)(nil),       // 8: approval.GetConfigRequest
	(*GetConfigResponse)(nil),      // 9: approval.GetConfigResponse
	(*GetConfigsRequest)(nil),      // 10: approval.GetConfigsRequest
	(*GetConfigsResponse)(nil),     // 11: approval.GetConfigsResponse
	(*CreateApprovalRequest)(nil),  // 12: approval.CreateApprovalRequest
	(*CreateApprovalResponse)(nil), // 13: approval.CreateApprovalResponse
	(*ApproveRequest)(nil),         // 14: approval.ApproveRequest
	(*ApproveResponse)(nil),        // 15: approval.ApproveResponse
	(*DenyRequest)(nil),            // 16: approval.DenyRequest
	(*DenyResponse)(nil),           // 17: approval.DenyResponse
	(*GetMyApprovalRequest)(nil),   // 18: approval.GetMyApprovalRequest
	(*GetMyApprovalResponse)(nil),  // 19: approval.GetMyApprovalResponse
	(*PageMyApprovalRequest)(nil),  // 20: approval.PageMyApprovalRequest
	(*PageMyApprovalResponse)(nil), // 21: approval.PageMyApprovalResponse
	(*GetSequencesRequest)(nil),    // 22: approval.GetSequencesRequest
	(*GetSequencesResponse)(nil),   // 23: approval.GetSequencesResponse
}
var file_approval_proto_depIdxs = []int32{
	0,  // 0: approval.Config.steps:type_name -> approval.Step
	1,  // 1: approval.Config.CC:type_name -> approval.CC
	3,  // 2: approval.ApprovalPage.approvals:type_name -> approval.Approval
	0,  // 3: approval.CreateConfigRequest.steps:type_name -> approval.Step
	1,  // 4: approval.CreateConfigRequest.CC:type_name -> approval.CC
	2,  // 5: approval.CreateConfigResponse.config:type_name -> approval.Config
	2,  // 6: approval.GetConfigResponse.config:type_name -> approval.Config
	2,  // 7: approval.GetConfigsResponse.configs:type_name -> approval.Config
	3,  // 8: approval.CreateApprovalResponse.approval:type_name -> approval.Approval
	4,  // 9: approval.CreateApprovalResponse.sequences:type_name -> approval.Sequence
	3,  // 10: approval.ApproveResponse.approval:type_name -> approval.Approval
	4,  // 11: approval.ApproveResponse.sequences:type_name -> approval.Sequence
	3,  // 12: approval.DenyResponse.approval:type_name -> approval.Approval
	4,  // 13: approval.DenyResponse.sequences:type_name -> approval.Sequence
	3,  // 14: approval.GetMyApprovalResponse.approvals:type_name -> approval.Approval
	5,  // 15: approval.PageMyApprovalResponse.page:type_name -> approval.ApprovalPage
	4,  // 16: approval.GetSequencesResponse.sequences:type_name -> approval.Sequence
	6,  // 17: approval.ApprovalService.CreateApprovalConfig:input_type -> approval.CreateConfigRequest
	8,  // 18: approval.ApprovalService.GetApprovalConfig:input_type -> approval.GetConfigRequest
	10, // 19: approval.ApprovalService.GetApprovalConfigs:input_type -> approval.GetConfigsRequest
	12, // 20: approval.ApprovalService.CreateApproval:input_type -> approval.CreateApprovalRequest
	14, // 21: approval.ApprovalService.ApproveApproval:input_type -> approval.ApproveRequest
	16, // 22: approval.ApprovalService.DenyApproval:input_type -> approval.DenyRequest
	18, // 23: approval.ApprovalService.GetMyApproval:input_type -> approval.GetMyApprovalRequest
	20, // 24: approval.ApprovalService.PageMyApproval:input_type -> approval.PageMyApprovalRequest
	22, // 25: approval.ApprovalService.GetApprovalSequences:input_type -> approval.GetSequencesRequest
	7,  // 26: approval.ApprovalService.CreateApprovalConfig:output_type -> approval.CreateConfigResponse
	9,  // 27: approval.ApprovalService.GetApprovalConfig:output_type -> approval.GetConfigResponse
	11, // 28: approval.ApprovalService.GetApprovalConfigs:output_type -> approval.GetConfigsResponse
	13, // 29: approval.ApprovalService.CreateApproval:output_type -> approval.CreateApprovalResponse
	15, // 30: approval.ApprovalService.ApproveApproval:output_type -> approval.ApproveResponse
	17, // 31: approval.ApprovalService.DenyApproval:output_type -> approval.DenyResponse
	19, // 32: approval.ApprovalService.GetMyApproval:output_type -> approval.GetMyApprovalResponse
	21, // 33: approval.ApprovalService.PageMyApproval:output_type -> approval.PageMyApprovalResponse
	23, // 34: approval.ApprovalService.GetApprovalSequences:output_type -> approval.GetSequencesResponse
	26, // [26:35] is the sub-list for method output_type
	17, // [17:26] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_approval_proto_init() }
func file_approval_proto_init() {
	if File_approval_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_approval_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Step); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_approval_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_approval_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_approval_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Approval); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_approval_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sequence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_approval_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApprovalPage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_approval_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_approval_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_approval_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_approval_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_approval_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConfigsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_approval_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConfigsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_approval_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateApprovalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_approval_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateApprovalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_approval_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApproveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_approval_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApproveResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_approval_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DenyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_approval_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DenyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_approval_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMyApprovalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_approval_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMyApprovalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_approval_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PageMyApprovalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_approval_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PageMyApprovalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_approval_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSequencesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_approval_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSequencesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_approval_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_approval_proto_goTypes,
		DependencyIndexes: file_approval_proto_depIdxs,
		MessageInfos:      file_approval_proto_msgTypes,
	}.Build()
	File_approval_proto = out.File
	file_approval_proto_rawDesc = nil
	file_approval_proto_goTypes = nil
	file_approval_proto_depIdxs = nil
}
